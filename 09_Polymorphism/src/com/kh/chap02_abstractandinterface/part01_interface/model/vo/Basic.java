package com.kh.chap02_abstractandinterface.part01_interface.model.vo;

public interface Basic {
	//[표현법]
	//[접근제한자]interface 인터페이스명{}
	//인터페이스
	//상수필드와 추상메소드로만 이루어진 추상클래스의 변형체?
	//인터페이스 필드는 무조건 상수필드다.
	//인터페이스에서 메소든느 무조건 추상메소드이다.
	//무조건 구현해야하는게 있을때 인터페이스를 만들어서 상속하게 된다.
	//인터페이스는 다중 상속을 허용한다.
	/* 결국 메소드에 대한 정의만 하고있어서 메소드가 겹치더라도 최정구현부분은 구현클래서 이루어질것이 때문에 다중상속이 가능하다.
	 * -추상클래스와 드ㅏ르게 좀더 강한 규칙성 , 강제성을 가지는게 인터페이스다.
	 * 추상클래스와 인터페이스 
	 * 1. 공통점
	 * 객체생성은 안되나 참조변수로서 사용가능
	 * 상속하는 클래스에 추상메서도를 구현하도록 강제한다.
	 * 2.차이점
	 * 추상클래슨느 클래스내에 인스턴스 변수, 메소드를 생성가능하고 추상메소드가 포함되어있거나 abstract키워드로 클래스가 정의되어있고
	 * 인터페이스는 인스턴스 변수 메소드 생성이 불가능하면 모든변수는 상수필드 메소드는 추상메소드로 정의되어있다.
	 * 존재하는 목적이다르다.
	 * 클레스를 확장하는데목적이있다
	 * 인터페이스는 구현을 강제하기때문에 구현객체의 같은 동작을 보장한다.
	 * 
	 * 인터페이스를 더 많이 씀 실질적으로
	 * 
	 */
	/*
	 * extends와 implements
	 * -클래스간에 상속 관계일떄 클래스명 extends 클래스명
	 * -클래스와 인터페이스 의 구현관계일떄 클래스명 impelment iemplements
	 * d
	 * 
	 */
	int NUM=10;
	void eat();
	void sleep();
}
