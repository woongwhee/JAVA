package com.kh.chap01_abstraction.run;

import com.kh.chap01_abstraction.model.vo.Student;

public class Run {
	/*
	 * 1. 객체지향언어 : 객체중심으로 돌아간다.
	 * 
	 * 2. 객체란? 사전적 의미 : 현실세계에 독립적으로 존재하는 못든것 
	 * 
	 * 3. 객체지향 프로그래밍 : 현실세계에서 독립적인 존재들 간의 상호작용으로 이루어진다라고 보고
	 * =>프로그래밍을 통해 가상세계(코드)로 구현하는 과정
	 * 
	 * 4. 구현하고자하는 프로그램 상의 필요한 객체를 만들기(생성하기) 위해서? 
	 * 클래스라는 틀을 먼저 만들어야함
	 * 클래스란? 각 객체들의 속성(정보)를 담아낼수 있는 그릇과도 같은 존재
	 * 어떻게 만드냐 ? 1단계 추상화, 2단계 캡슐화를 접목하여 만다므.
	 * 
	 * 5. 추상화 과정
	 *  1) 내가 구현하고자 하는 프로그램에서 필요한 객체들을 생각해볼것.
	 *  	
	 *  2) 그 객체들이 가지고 있는 공통적인 속성, 기능들을 모두 추출할것.
	 *  3) 그렇게 추출한 것들을 가지고 내가 구현한 프로그램의 "실질적인 목적"에 맞춰 불필요한 속성, 기능등을 제거해서 추려내기.
	 *  4) 최종적으로 추려진 속성들을 가지고 어떤 자료형에 어떤 이름으로 사용할 건지 생각해보기
	 * 	ex) 1. 학생관리프로그램에서의 학생객체-> 홍길동, 민경민, 민정민
	 *		2. 이름, 나이,성별,주소,키,인종,눈동자수,머리색,시력,등등등..
	 *		3. 필요한걸 추려냄->인종 머리색 눈동자수등 불필요한 속성 제거
	 *		4. 이름 -> String name; 나이 -> int age; 성별 -> char gender;
	 *		학생 관련 프로그램
	 *		1) 학생관련 객체 
	 *		2) 성적을 관리하는 프로그램이라고 한다면: 이름, 나이 ,국어점수,영어점수,학년,반,
	 *		3) 건강을 관리하는 프로그램이라고 한다면: 이름, 나이 , 성별 , 키 ,시력, 몸무게, 청력
	 *		4) 자료형과 변수명을 사용할지 생각해보기.
	 *			이름 String name;,나이 int age;
	 *		5)위에 선정된것을 가지고 본격적으로 프로그래밍을 하려고 한다면.		
	 *			1. 변수 0> 변수는 하나의 변수에 하나의 값만담을수있다.
	 *				학생수가 많아질수록. 관리하기 힘들어진다.
	 *			2. "배 열":하나의 자료형에 여러개의 값을 담을 수있지만 같은 자료형만 보관을 해줘야한다.
	 *				학생이 삭제되거나 추가될때 별도의 추가작업이 많고 관리하기가 힘들다.
	 *			3. 위의 어려움때문에 나온게"구조체"라는 개념
	 *				구조체: 한번에 여러개의 자료형을 보관할 수 있는 배열같은 형태
	 *					struct ST{
	 *							int age;
	 *							Strign name;
	 *					}이런식
	 *				클래스: 각 객체들의 속성 정보를 담아내는 그릇과 같은 존재다.
	 */			
	public static void main(String[] args) {
			Student std=new Student();//
			std.name="민경";
			std.age =20;
			std.height=180;
			Student hong =new Student();
			hong.name="홍길";
			hong.age =24;
			hong.height=163.4;//필드에 '직접접근해' 값을 설정하는것.
			//필드에 직접 접근해 값을 설정하는건 객체지향 프로그래밍에서 권장하지않는다.
			//캡슐화로 해결
			System.out.println(std);//이렇게하면 임포트까지 합쳐서 주소값이 출력된다.
	}
}
